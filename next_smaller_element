Given an array, find the nearest smaller element G[i] for every element A[i] in the array such that the element has an index smaller than i.

More formally,

    G[i] for an element A[i] = an element A[j] such that 
    j is maximum possible AND 
    j < i AND
    A[j] < A[i]
Elements for which no smaller element exist, consider next smaller element as -1.



public class Solution {
    public int[] prevSmaller(int[] A) {
        //this is an optimal approach we will discuss it later
      /*  int[] G=new int[A.length];
        for(int i=0;i<A.length;i++){
            int temp=-1;
            for(int j=i-1;j>=0;j--){
                if(A[i]>A[j]){
                    temp=   A[j];
                    break;
                }
                
            }
            G[i]=temp;
        }
        return G;
    }*/
    int []G=new int[A.length];
    Stack<Integer> stack=new Stack<Integer>();
    
    for(int i=0;i<A.length;i++){
        while(!stack.isEmpty() && stack.peek()>=A[i]){
            stack.pop();
        }
        if(stack.isEmpty()){
            G[i]=-1;
        }
        else{
            G[i]=stack.peek();
           
        }
        stack.push(A[i]);
        
    }
    return G;
    }
    
}
