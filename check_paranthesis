Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.


import java.util.Stack;

class Solution {
    public boolean isValid(String s) {
        // Create a stack to keep track of opening brackets
        Stack<Character> stack = new Stack<>();
        
        // Iterate over each character in the input string
        for (char ch : s.toCharArray()) {
            // If it's an opening bracket, push it to the stack
            if (ch == '{' || ch == '[' || ch == '(') {
                stack.push(ch);
            } 
            // If it's a closing bracket
            else {
                // If the stack is empty, it means there's no matching opening bracket
                if (stack.isEmpty()) {
                    return false;
                }
                // Pop the top element from the stack and check for matching brackets
                char top = stack.pop();
                if (ch == '}' && top != '{') {
                    return false;
                } else if (ch == ']' && top != '[') {
                    return false;
                } else if (ch == ')' && top != '(') {
                    return false;
                }
            }
        }
        
        // In the end, the stack should be empty if all brackets were properly matched
        return stack.isEmpty();
    }
}
